// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(EMPLOYEE)
  managerId     String?   // Self-referencing for manager hierarchy
  department    String?
  startDate     DateTime  @default(now())
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  manager       User?     @relation("ManagerEmployee", fields: [managerId], references: [id])
  directReports User[]    @relation("ManagerEmployee")
  leaveRequests LeaveRequest[]
  approvedRequests LeaveRequest[] @relation("ApprovedBy")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeaveRequest {
  id          String      @id @default(cuid())
  userId      String
  startDate   DateTime
  endDate     DateTime
  leaveType   LeaveType
  status      RequestStatus @default(PENDING)
  note        String?
  approverComment String?
  approvedById String?
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy  User?       @relation("ApprovedBy", fields: [approvedById], references: [id])
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Holiday {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  isRecurring Boolean  @default(false)
  description String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum LeaveType {
  VACATION
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  BEREAVEMENT
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
